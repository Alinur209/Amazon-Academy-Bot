import telebot
from telebot import types
import sqlite3



bot = telebot.TeleBot('5943446610:AAED2hJ7xEUU-TtygGs_6kdcdep0eQUDNMs')




@bot.message_handler(commands=['start'])
def start(message):
    markup = types.InlineKeyboardMarkup()
    menu_button = types.InlineKeyboardButton('–ú–µ–Ω—é', callback_data='menu')
    markup.add(menu_button)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:", reply_markup=markup)



@bot.callback_query_handler(func=lambda call: call.data == 'menu')
def handle_menu(callback_query):
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton('‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–µ Amazon üë®üèªüíª ', callback_data='introduction')
    btn2 = types.InlineKeyboardButton('‚Ä¢ –ß—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –∫—É—Ä—Å–∞? üìå', callback_data='sales_strategy')
    btn3 = types.InlineKeyboardButton('‚Ä¢ –ö–∞–∫ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è? üì©', callback_data='language_barriers')
    btn4 = types.InlineKeyboardButton('‚Ä¢ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é', callback_data='registration')
    markup.row(btn1)
    markup.row(btn2)
    markup.row(btn3)
    markup.row(btn4)
    bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == 'introduction')
def handle_menu(callback_query):
    markup = types.InlineKeyboardMarkup()

    # –ö–Ω–æ–ø–∫–∏ –≤–Ω—É—Ç—Ä–∏ —Ä–∞–∑–¥–µ–ª–∞ "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–µ Amazon"
    introduction_btn = types.InlineKeyboardButton('–û–Ω–ª–∞–π–Ω —Ñ–æ—Ä–º–∞—Ç:', callback_data='introduction_btn')
    sales_strategy_btn = types.InlineKeyboardButton('–û—Ñ—Ñ–ª–∞–π–Ω —Ñ–æ—Ä–º–∞—Ç:', callback_data='sales_strategy_btn')
    language_barriers_btn = types.InlineKeyboardButton('–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ:', callback_data='language_barriers_btn')

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤ —Ä–∞–∑–º–µ—Ç–∫—É
    markup.row(introduction_btn)
    markup.row(sales_strategy_btn)
    markup.row(language_barriers_btn)

    bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == 'introduction_btn')
def handle_introduction(callback_query):
    markup = types.InlineKeyboardMarkup()

    btn1 = types.InlineKeyboardButton('–ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ–±—É—á–µ–Ω–∏—è', callback_data='button1')
    back_button = types.InlineKeyboardButton('Back to menu', callback_data='menu')
    btn2 = types.InlineKeyboardButton('–ì—Ä–∞—Ñ–∏–∫ –æ–±—É—á–µ–Ω–∏—è', callback_data='button2')
    back_button = types.InlineKeyboardButton('Back to menu', callback_data='menu')
    # btn3 = types.InlineKeyboardButton('–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å', callback_data='button3')
    # back_button = types.InlineKeyboardButton('Back to menu', callback_data='menu')
    btn4 = types.InlineKeyboardButton('–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è', callback_data='button4')
    back_button = types.InlineKeyboardButton('Back to menu', callback_data='menu')
    btn6 = types.InlineKeyboardButton('–°—Ç–æ–∏–º–æ—Å—Ç—å –∫—É—Ä—Å–∞', callback_data='button6')
    back_button = types.InlineKeyboardButton('Back to menu', callback_data='menu')

    markup.row(btn1)
    markup.row(btn2)
    # markup.row(btn3)
    markup.row(btn4)
    markup.row(btn6)
    markup.row(back_button)

    bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ–Ω–ª–∞–π–Ω —Ñ–æ—Ä–º–∞—Ç–∞:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == 'button1')
def handle_button(callback_query):
    markup = types.InlineKeyboardMarkup()
    back_button = types.InlineKeyboardButton('Back to menu', callback_data='menu')
    markup.row(back_button)
    # bot.send_message(callback_query.from_user.id, "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ–±—É—á–µ–Ω–∏—è:", reply_markup=markup)
    program_description = '''
        –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ–±—É—á–µ–Ω–∏—è: 

–ö—É—Ä—Å –±–∏–∑–Ω–µ—Å –≤ AMAZONüíµ

‚úîÔ∏è –û–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏–µ —Å –±–∏–∑–Ω–µ—Å –º–æ–¥–µ–ª—è–º–∏ —Ä–∞–±–æ—Ç—ã –≤ –ê–º–∞–∑–æ–Ω;
‚úîÔ∏è –û–±—É—á–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ FLIPPING —Å –Ω—É–ª—è;
‚úîÔ∏è –ö–∞–∫ –º–æ–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑ –ª—é–±–æ–π —Ç–æ—á–∫–∏ –º–∏—Ä–∞ –æ—Ç–∫—Ä—ã–≤ –±–∏–∑–Ω–µ—Å –≤ –ê–º–∞–∑–æ–Ω;
‚úîÔ∏è –ê–ª–≥–æ—Ä–∏—Ç–º –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–¥–∞–∂ –≤ –ê–º–∞–∑–æ–Ω;
‚úîÔ∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –ê–º–∞–∑–æ–Ω;
‚úîÔ∏è –ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–µ—Ä–≤–∏—Å—ã –ø–æ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ;
‚úîÔ∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø–æ –ø–æ–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤ –∏ –≤—ã—Ö–æ–¥ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É;
‚úîÔ∏è –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ —Å –∞–∫–∫–∞—É–Ω—Ç–∞ –ê–º–∞–∑–æ–Ω –Ω–∞ —Å–≤–æ–π –±–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á–µ—Ç;
‚úîÔ∏è –¢–∞–∫–∂–µ –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø–æ –∑–∞–ø—É—Å–∫—É –±–∏–∑–Ω–µ—Å–∞ –≤ –ê–º–∞–∑–æ–Ω –∏ –ø–æ–¥–µ–ª–∏–º—Å—è –≤—Å–µ–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏ –∫–æ—Ç–æ—Ä—ã–º–∏ –æ–±–ª–∞–¥–∞–µ–º;
        '''

    bot.send_message(callback_query.from_user.id, program_description, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == 'button2')
def handle_button(callback_query):
    markup = types.InlineKeyboardMarkup()
    back_button = types.InlineKeyboardButton('Back to menu', callback_data='menu')
    markup.row(back_button)
    # bot.send_message(callback_query.from_user.id, "–ü—Ä–∏–≤–µ—Ç, –ì—Ä–∞—Ñ–∏–∫ –æ–±—É—á–µ–Ω–∏—è", reply_markup=markup)
    graph_description = '''
        üìÖ–ì—Ä–∞—Ñ–∏–∫ –æ–±—É—á–µ–Ω–∏—è:

–ì—Ä–∞—Ñ–∏–∫ –æ–±—É—á–µ–Ω–∏—è –æ–Ω–ª–∞–π–Ω –∫—É—Ä—Å–∞, —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ –Ω–∞ –≤–∞—à–µ —É–¥–æ–±—Å—Ç–≤–æ. 
–ö—É—Ä—Å –ø—Ä–æ—Ö–æ–¥–∏—Ç –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ, –≥–¥–µ –≤–∞–º –¥–∞—ë—Ç—Å—è –¥–æ—Å—Ç—É–ø –∫ —É—Ä–æ–∫–∞–º. 
–¢–∞–∫–∂–µ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –≥—Ä—É–ø–ø–∞ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –æ—Ç –º–µ–Ω—è –∏ –∫—É—Ä–∞—Ç–æ—Ä–æ–≤.
        '''

    bot.send_message(callback_query.from_user.id, graph_description, reply_markup=markup)


# @bot.callback_query_handler(func=lambda call: call.data == 'button3')
# def handle_button(callback_query):
#     markup = types.InlineKeyboardMarkup()
#     back_button = types.InlineKeyboardButton('Back to menu', callback_data='menu')
#     markup.row(back_button)
#     bot.send_message(callback_query.from_user.id, "–ü—Ä–∏–≤–µ—Ç, –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == 'button4')
def handle_button(callback_query):
    markup = types.InlineKeyboardMarkup()
    back_button = types.InlineKeyboardButton('Back to menu', callback_data='menu')
    markup.row(back_button)
    # bot.send_message(callback_query.from_user.id, "–ü—Ä–∏–≤–µ—Ç, –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è", reply_markup=markup)
    duration_description = '''
        –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è:
    
–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è 2 –º–µ—Å—è—Ü–∞. 
–ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∫—É—Ä—Å–∞, —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∫—É—Ä—Å–∞ –±—É–¥–µ—Ç –¥–ª–∏—Ç—å—Å—è –¥–æ 6 –º–µ—Å—è—Ü–µ–≤. 

–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å –≤ –≥—Ä—É–ø–ø—Éüëç
        '''

    bot.send_message(callback_query.from_user.id, duration_description, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == 'button6')
def handle_button(callback_query):
    markup = types.InlineKeyboardMarkup()
    back_button = types.InlineKeyboardButton('Back to menu', callback_data='menu')
    markup.row(back_button)
    # bot.send_message(callback_query.from_user.id, "–ü—Ä–∏–≤–µ—Ç, –°—Ç–æ–∏–º–æ—Å—Ç—å –∫—É—Ä—Å–∞", reply_markup=markup)
    cost_description = '''
–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–Ω–ª–∞–π–Ω –∫—É—Ä—Å–∞ - 250$
(–í —Å–æ–º–∞—Ö –º–æ–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –ø–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ–º—É –∫—É—Ä—Å—É)
       '''

    bot.send_message(callback_query.from_user.id, cost_description, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == 'sales_strategy_btn')
def handle_sales_strategy(callback_query):
    markup = types.InlineKeyboardMarkup()

    # –ö–Ω–æ–ø–∫–∏ –≤–Ω—É—Ç—Ä–∏ —Ä–∞–∑–¥–µ–ª–∞ "–ß—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –∫—É—Ä—Å–∞?"
    button1 = types.InlineKeyboardButton('–ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ–±—É—á–µ–Ω–∏—è', callback_data='sales_strategy_btn1')
    button2 = types.InlineKeyboardButton('–ì—Ä–∞—Ñ–∏–∫ –æ–±—É—á–µ–Ω–∏—è', callback_data='sales_strategy_btn2')
    # button3 = types.InlineKeyboardButton('–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å', callback_data='sales_strategy_btn3')
    button4 = types.InlineKeyboardButton('–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è', callback_data='sales_strategy_btn4')
    button6 = types.InlineKeyboardButton('–°—Ç–æ–∏–º–æ—Å—Ç—å –∫—É—Ä—Å–∞', callback_data='sales_strategy_btn6')
    back_button = types.InlineKeyboardButton('Back to menu', callback_data='menu')

    markup.row(button1)
    markup.row(button2)
    # markup.row(button3)
    markup.row(button4)
    markup.row(button6)
    markup.row(back_button)

    bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –û—Ñ—Ñ–ª–∞–π–Ω —Ñ–æ—Ä–º–∞—Ç–∞:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == 'sales_strategy_btn1')
def handle_sales_strategy_btn1(callback_query):
    markup = types.InlineKeyboardMarkup()
    back_button = types.InlineKeyboardButton('Back to menu', callback_data='menu')
    markup.row(back_button)
    # bot.send_message(callback_query.from_user.id, "–ü—Ä–∏–≤–µ—Ç, –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∫—É—Ä—Å–∞", reply_markup=markup)
    course_program = '''
        –ö—É—Ä—Å –±–∏–∑–Ω–µ—Å –≤ AMAZONüíµ

‚úîÔ∏è –û–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏–µ —Å –±–∏–∑–Ω–µ—Å –º–æ–¥–µ–ª—è–º–∏ —Ä–∞–±–æ—Ç—ã –≤ –ê–º–∞–∑–æ–Ω;
‚úîÔ∏è –û–±—É—á–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ FLIPPING —Å –Ω—É–ª—è;
‚úîÔ∏è –ö–∞–∫ –º–æ–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑ –ª—é–±–æ–π —Ç–æ—á–∫–∏ –º–∏—Ä–∞ –æ—Ç–∫—Ä—ã–≤ –±–∏–∑–Ω–µ—Å –≤ –ê–º–∞–∑–æ–Ω;
‚úîÔ∏è –ê–ª–≥–æ—Ä–∏—Ç–º –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–¥–∞–∂ –≤ –ê–º–∞–∑–æ–Ω;
‚úîÔ∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –ê–º–∞–∑–æ–Ω;
‚úîÔ∏è –ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–µ—Ä–≤–∏—Å—ã –ø–æ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ;
‚úîÔ∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø–æ –ø–æ–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤ –∏ –≤—ã—Ö–æ–¥ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É;
‚úîÔ∏è –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ —Å –∞–∫–∫–∞—É–Ω—Ç–∞ –ê–º–∞–∑–æ–Ω –Ω–∞ —Å–≤–æ–π –±–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á–µ—Ç;
‚úîÔ∏è –¢–∞–∫–∂–µ –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø–æ –∑–∞–ø—É—Å–∫—É –±–∏–∑–Ω–µ—Å–∞ –≤ –ê–º–∞–∑–æ–Ω –∏ –ø–æ–¥–µ–ª–∏–º—Å—è –≤—Å–µ–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏ –∫–æ—Ç–æ—Ä—ã–º–∏ –æ–±–ª–∞–¥–∞–µ–º;
        '''

    bot.send_message(callback_query.from_user.id, course_program, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == 'sales_strategy_btn2')
def handle_sales_strategy_btn2(callback_query):
    markup = types.InlineKeyboardMarkup()
    back_button = types.InlineKeyboardButton('Back to menu', callback_data='menu')
    markup.row(back_button)
    # bot.send_message(callback_query.from_user.id, "–ü—Ä–∏–≤–µ—Ç, –ì—Ä–∞—Ñ–∏–∫ –æ–±—É—á–µ–Ω–∏—è", reply_markup=markup)
    schedule_description = '''
        –ì—Ä–∞—Ñ–∏–∫ –æ–±—É—á–µ–Ω–∏—è –æ—Ñ—Ñ–ª–∞–π–Ω –∫—É—Ä—Å–∞

–£—Ä–æ–∫–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç 3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é, –ø–æ 2 —á–∞—Å–∞. 
–ü–æ –≤—Ç–æ—Ä–Ω–∏–∫–∞–º, —á–µ—Ç–≤–µ—Ä–≥–∞–º –∏ —Å—É–±–±–æ—Ç–∞–º. 

–£—Ç—Ä–µ–Ω–Ω—è—è –≥—Ä—É–ø–ø–∞: —Å 9:00-11:00 
–î–Ω–µ–≤–Ω–∞—è –≥—Ä—É–ø–ø–∞: —Å 14:00 - 16:00
–í–µ—á–µ—Ä–Ω—è—è –≥—Ä—É–ø–ø–∞: —Å 19:00 - 21:00 

–í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–≤–æ–µ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞, –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —É–¥–æ–±–Ω–æ–µ –¥–ª—è –≤–∞—Å –≤—Ä–µ–º—è!
        '''

    bot.send_message(callback_query.from_user.id, schedule_description, reply_markup=markup)


# @bot.callback_query_handler(func=lambda call: call.data == 'sales_strategy_btn3')
# def handle_sales_strategy_btn2(callback_query):
#     markup = types.InlineKeyboardMarkup()
#     back_button = types.InlineKeyboardButton('Back to menu', callback_data='menu')
#     markup.row(back_button)
#     bot.send_message(callback_query.from_user.id, "–ü—Ä–∏–≤–µ—Ç, –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == 'sales_strategy_btn4')
def handle_sales_strategy_btn2(callback_query):
    markup = types.InlineKeyboardMarkup()
    back_button = types.InlineKeyboardButton('Back to menu', callback_data='menu')
    markup.row(back_button)
    # bot.send_message(callback_query.from_user.id, "–ü—Ä–∏–≤–µ—Ç, –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è", reply_markup=markup)
    duration_description = '''
–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è 2 –º–µ—Å—è—Ü–∞. 
–°–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∫—É—Ä—Å–∞, –¥–æ 6 –º–µ—Å—è—Ü–µ–≤. 

–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å –≤ –≥—Ä—É–ø–ø—É –∏–ª–∏ –∂–µ –ø–æ–¥–æ–π—Ç–∏ –∫ –Ω–∞–º –≤ –æ—Ñ–∏—Åüëç
        '''

    bot.send_message(callback_query.from_user.id, duration_description, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == 'sales_strategy_btn6')
def handle_sales_strategy_btn2(callback_query):
    markup = types.InlineKeyboardMarkup()
    back_button = types.InlineKeyboardButton('Back to menu', callback_data='menu')
    markup.row(back_button)
    # bot.send_message(callback_query.from_user.id, "–ü—Ä–∏–≤–µ—Ç, –°—Ç–æ–∏–º–æ—Å—Ç—å –∫—É—Ä—Å–∞", reply_markup=markup)
    cost_description = '''
–°—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ñ—Ñ–ª–∞–π–Ω –∫—É—Ä—Å–∞ - 350$ 
(–í —Å–æ–º–∞—Ö –º–æ–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –ø–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ–º—É –∫—É—Ä—Å—É)
        '''

    bot.send_message(callback_query.from_user.id, cost_description, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == 'language_barriers_btn')
def handle_sales_strategy(callback_query):
    markup = types.InlineKeyboardMarkup()

    # –ö–Ω–æ–ø–∫–∏ –≤–Ω—É—Ç—Ä–∏ —Ä–∞–∑–¥–µ–ª–∞ "–ß—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –∫—É—Ä—Å–∞?"
    # button1 = types.InlineKeyboardButton('–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∫—É—Ä—Å–∞', callback_data='language_barriers_btn1')
    # button2 = types.InlineKeyboardButton('–ì—Ä–∞—Ñ–∏–∫ –æ–±—É—á–µ–Ω–∏—è', callback_data='language_barriers_btn2')
    # button3 = types.InlineKeyboardButton('–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å', callback_data='language_barriers_btn3')
    # button4 = types.InlineKeyboardButton('–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è', callback_data='language_barriers_btn4')
    # button6 = types.InlineKeyboardButton('–°—Ç–æ–∏–º–æ—Å—Ç—å –∫—É—Ä—Å–∞', callback_data='language_barriers_btn6')
    back_button = types.InlineKeyboardButton('Back to menu', callback_data='menu')

    # markup.row(button1)
    # markup.row(button2)
    # markup.row(button3)
    # markup.row(button4)
    # markup.row(button6)
    markup.row(back_button)

    # bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è:", reply_markup=markup)
    individual_training_description = '''
        –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ —Å–æ –º–Ω–æ–π üí∏

–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –ì–û–¢–û–í–û–ì–û –ê–ö–ö–ê–£–ù–¢–ê –Ω–∞ –ê–º–∞–∑–æ–Ω, —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–π—Ç–∏ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞–º–Ω–æ–≥–æ –±—ã—Å—Ç—Ä–µ–µ‚úÖ

–ì—Ä–∞—Ñ–∏–∫ –æ–±—É—á–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–æ–≤—ã–≤–∞–µ—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ, –∏—Å—Ö–æ–¥—è –∏–∑ –≤–∞—à–µ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞.

–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è 1-2 –º–µ—Å—è—Ü–∞, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≥—Ä–∞—Ñ–∏–∫–∞ –∏ –æ—Ç –í–∞—à–µ–π —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏.

–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è 1000$
        '''

    bot.send_message(callback_query.from_user.id, individual_training_description, reply_markup=markup)


# @bot.callback_query_handler(func=lambda call: call.data == 'language_barriers_btn1')
# def handle_sales_strategy_btn1(callback_query):
#     markup = types.InlineKeyboardMarkup()
#     back_button = types.InlineKeyboardButton('Back to menu', callback_data='menu')
#     markup.row(back_button)
#     bot.send_message(callback_query.from_user.id, "–ü—Ä–∏–≤–µ—Ç, –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∫—É—Ä—Å–∞", reply_markup=markup)
#
#
# @bot.callback_query_handler(func=lambda call: call.data == 'language_barriers_btn2')
# def handle_sales_strategy_btn2(callback_query):
#     markup = types.InlineKeyboardMarkup()
#     back_button = types.InlineKeyboardButton('Back to menu', callback_data='menu')
#     markup.row(back_button)
#     bot.send_message(callback_query.from_user.id, "–ü—Ä–∏–≤–µ—Ç, –ì—Ä–∞—Ñ–∏–∫ –æ–±—É—á–µ–Ω–∏—è", reply_markup=markup)
#
#
# @bot.callback_query_handler(func=lambda call: call.data == 'language_barriers_btn3')
# def handle_sales_strategy_btn2(callback_query):
#     markup = types.InlineKeyboardMarkup()
#     back_button = types.InlineKeyboardButton('Back to menu', callback_data='menu')
#     markup.row(back_button)
#     bot.send_message(callback_query.from_user.id, "–ü—Ä–∏–≤–µ—Ç, –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", reply_markup=markup)
#
#
# @bot.callback_query_handler(func=lambda call: call.data == 'language_barriers_btn4')
# def handle_sales_strategy_btn2(callback_query):
#     markup = types.InlineKeyboardMarkup()
#     back_button = types.InlineKeyboardButton('Back to menu', callback_data='menu')
#     markup.row(back_button)
#     bot.send_message(callback_query.from_user.id, "–ü—Ä–∏–≤–µ—Ç, –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è", reply_markup=markup)
#
#
#
# @bot.callback_query_handler(func=lambda call: call.data == 'language_barriers_btn6')
# def handle_sales_strategy_btn2(callback_query):
#     markup = types.InlineKeyboardMarkup()
#     back_button = types.InlineKeyboardButton('Back to menu', callback_data='menu')
#     markup.row(back_button)
#     bot.send_message(callback_query.from_user.id, "–ü—Ä–∏–≤–µ—Ç, –°—Ç–æ–∏–º–æ—Å—Ç—å –∫—É—Ä—Å–∞", reply_markup=markup)







# @bot.callback_query_handler(func=lambda call: call.data == 'language_barriers')
# def handle_sales_strategy(callback_query):
#     markup = types.InlineKeyboardMarkup()
#
#     # –ö–Ω–æ–ø–∫–∏ –≤–Ω—É—Ç—Ä–∏ —Ä–∞–∑–¥–µ–ª–∞ "–ß—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –∫—É—Ä—Å–∞?"
#     button1 = types.InlineKeyboardButton('–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∫—É—Ä—Å–∞', callback_data='language_barriers1')
#     button2 = types.InlineKeyboardButton('–ì—Ä–∞—Ñ–∏–∫ –æ–±—É—á–µ–Ω–∏—è', callback_data='language_barriers2')
#     button3 = types.InlineKeyboardButton('–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é', callback_data='language_barriers3')
#     back_button = types.InlineKeyboardButton('Back to menu', callback_data='menu')
#
#     markup.row(button1)
#     markup.row(button2)
#     markup.row(button3)
#     markup.row(back_button)
#
#     bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ö–∞–∫ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è:", reply_markup=markup)
#
#
# @bot.callback_query_handler(func=lambda call: call.data == 'language_barriers1')
# def handle_sales_strategy_btn1(callback_query):
#     markup = types.InlineKeyboardMarkup()
#     back_button = types.InlineKeyboardButton('Back to menu', callback_data='menu')
#     markup.row(back_button)
#     bot.send_message(callback_query.from_user.id, "–ü—Ä–∏–≤–µ—Ç, –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∫—É—Ä—Å–∞", reply_markup=markup)
#
#
# @bot.callback_query_handler(func=lambda call: call.data == 'language_barriers2')
# def handle_sales_strategy_btn2(callback_query):
#     markup = types.InlineKeyboardMarkup()
#     back_button = types.InlineKeyboardButton('Back to menu', callback_data='menu')
#     markup.row(back_button)
#     bot.send_message(callback_query.from_user.id, "–ü—Ä–∏–≤–µ—Ç, –ì—Ä–∞—Ñ–∏–∫ –æ–±—É—á–µ–Ω–∏—è", reply_markup=markup)
#
#
# @bot.callback_query_handler(func=lambda call: call.data == 'language_barriers3')
# def handle_sales_strategy_btn2(callback_query):
#     markup = types.InlineKeyboardMarkup()
#     back_button = types.InlineKeyboardButton('Back to menu', callback_data='menu')
#     markup.row(back_button)
#     bot.send_message(callback_query.from_user.id, "–ü—Ä–∏–≤–µ—Ç, –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", reply_markup=markup)






# D:/SQLiteStudio/db_amazon_2023
# D:/SQLiteStudio/database.db_amazon_2023

@bot.callback_query_handler(func=lambda call: call.data == 'sales_strategy')
def handle_sales_strategy(callback_query):
    requirements_and_investments = '''
    –î–ª—è –æ–±—É—á–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:

- –ù–∞–ª–∏—á–∏–µ –Ω–æ—É—Ç–±—É–∫–∞ üíª
- –£–º–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–æ—É—Ç–±—É–∫–æ–º –Ω–∞ —É—Ä–æ–≤–Ω–µ —É–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üßë‚Äçüíª
- 3-4 —á–∞—Å–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤ –¥–µ–Ω—å ‚è≥
( –∑–Ω–∞–Ω–∏–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ - –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)

–¢–∞–∫–∂–µ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞, –≤–ª–æ–∂–µ–Ω–∏—è –≤ —Ä–∞–∑–º–µ—Ä–µ 500$ –Ω–∞ —Ç–æ–≤–∞—Ä–æ–æ–±–æ—Ä–æ—Ç
    '''

    markup = types.InlineKeyboardMarkup()
    back_button = types.InlineKeyboardButton('Back to menu', callback_data='menu')
    markup.add(back_button)

    bot.send_message(callback_query.from_user.id, requirements_and_investments, reply_markup=markup)






@bot.callback_query_handler(func=lambda call: call.data == 'language_barriers')
def handle_sales_strategy(callback_query):
    requirements_and_investments11 = '''
–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫—É—Ä—Å, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–Ω–µ—Å—Ç–∏ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É –≤ —Ä–∞–∑–º–µ—Ä–µ 100$ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã: 

‚úÖ–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã –∫—É—Ä—Å–∞üí≥

4169585347460833 -Optima bank. –®–∞—Ä—à–µ–Ω–æ–≤ –ß—É–±–∞–∫
 
+996702120001 M bank 
0555577001 –≠–ª—Å–æ–º

‚ö†Ô∏è–ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ãüßæ
    '''

    markup = types.InlineKeyboardMarkup()
    back_button = types.InlineKeyboardButton('Back to menu', callback_data='menu')
    markup.add(back_button)

    bot.send_message(callback_query.from_user.id, requirements_and_investments11, reply_markup=markup)






# @bot.callback_query_handler(func=lambda call: call.data == 'language_barriers')
# def handle_language_barriers(callback_query):
#     bot.send_message(callback_query.from_user.id, "–ü—Ä–∏–≤–µ—Ç —ç—Ç–æ –ë–ª–∏–∂–∞–π—à–∏–π –∫—É—Ä—Å /–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ /–†–µ–∫–≤–∏–∑–∏—Ç—ã")
#     markup = types.InlineKeyboardMarkup()
#     back_button = types.InlineKeyboardButton('Back to menu', callback_data='menu')
#     markup.add(back_button)
#      bot.send_message(callback_query.from_user.id, "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é.", reply_markup=markup)

# conn = sqlite3.connect('D:/SQLiteStudio/db_amazon_2023', check_same_thread=False)
# cursor = conn.cursor()
#
# def db_table_val(user_id: int, user_name: str, user_surname: str, username: str):
#     cursor.execute('INSERT INTO test (user_id, user_name, user_surname, username) VALUES (?, ?, ?, ?)',
#                     (user_id, user_name, user_surname, username))
#     conn.commit()
#
# @bot.callback_query_handler(func=lambda call: call.data == 'registration')
# def handle_registration(callback_query):
#     @bot.message_handler(func=lambda message: True)
#     def get_text_messages(message):
#         if message.text.lower() == '–ø—Ä–∏–≤–µ—Ç':
#             bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç! –í–∞—à–µ –∏–º—è –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!')
#
#             user_id = message.from_user.id
#             user_name = message.from_user.first_name
#             user_surname = message.from_user.last_name
#             username = message.from_user.username
#
#             db_table_val(user_id=user_id, user_name=user_name, user_surname=user_surname, username=username)
#
#     markup = types.InlineKeyboardMarkup()
#     back_button = types.InlineKeyboardButton('Back to menu', callback_data='menu')
#     markup.add(back_button)
#     bot.send_message(callback_query.from_user.id, "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é.", reply_markup=markup)




import re
import sqlite3
from telebot import types

conn = sqlite3.connect('D:/SQLiteStudio/db_agit push -u origin maingit push -u origin mainn_2023', check_same_thread=False)
cursor = conn.cursor()

def db_table_val(user_id: int, user_name: str, user_surname: str, username: str, email: str, phone_number: str):
    cursor.execute('INSERT INTO test (user_id, user_name, user_surname, username, email, phone_number) VALUES (?, ?, ?, ?, ?, ?)',
                    (user_id, user_name, user_surname, username, email, phone_number))
    conn.commit()

@bot.callback_query_handler(func=lambda call: call.data == 'registration')
def handle_registration(callback_query):
    @bot.message_handler(func=lambda message: True)
    def get_text_messages(message):
        if message.text.lower() == 'REG':
            bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã.')

        elif re.match(r'\S+@\S+', message.text):
            email = re.findall(r'\S+@\S+', message.text)[0]
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è.')

            @bot.message_handler(func=lambda message: True)
            def get_name(message):
                name = message.text.strip()
                bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é.')

                @bot.message_handler(func=lambda message: True)
                def get_surname(message):
                    surname = message.text.strip()
                    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.')

                    @bot.message_handler(func=lambda message: True)
                    def get_phone_number(message):
                        phone_number = message.text.strip()

                        user_id = message.from_user.id
                        user_name = name
                        user_surname = surname
                        username = message.from_user.username

                        db_table_val(user_id=user_id, user_name=user_name, user_surname=user_surname, username=username,
                                     email=email, phone_number=phone_number)

                        bot.send_message(message.chat.id, '–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ.')

                    bot.register_next_step_handler(message, get_phone_number)

                bot.register_next_step_handler(message, get_surname)

            bot.register_next_step_handler(message, get_name)

        else:
            bot.send_message(message.chat.id, '–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ—á—Ç—ã.')

    markup = types.InlineKeyboardMarkup()
    back_button = types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é', callback_data='menu')
    markup.add(back_button)
    bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã.", reply_markup=markup)













bot.infinity_polling(none_stop = True)
